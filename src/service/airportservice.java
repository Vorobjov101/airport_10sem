/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package service;

import java.io.InputStreamReader;

import java.sql.Connection;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import logic.*;


/**
 *
 * @author 802249
 */
public class airportservice extends javax.swing.JFrame {

    DispetcherService disp;
    FlightService fls;
    ParkingService parks;
    TimetableService timet;
    Connection conn = null;
    
    InputStreamReader myfile = null;
    char buffer[] = null;
    
    
    DateFormat df;
    Calendar curr_date;
    Date curr_date1;
    String curr_date_str;
    
    Parking main_parking;
    Timetable main_timetable;
    Refueller refueller1;
    String log_buffer = null;
    
    
    
    public airportservice() {
        initComponents();
        
        main_parking = new Parking();
        main_timetable = new Timetable();
        refueller1 = new Refueller();
        refueller1.refresh();
        
        disp = new DispetcherService();
        fls = new FlightService();
        parks = new ParkingService();
        timet = new TimetableService();
        
        conn = disp.make_connection();
        
        df = new SimpleDateFormat("HH:mm:ss dd/MM/yyyy");

        curr_date = Calendar.getInstance();
        curr_date.set(2000,Calendar.JANUARY,1,0,0,0);
        curr_date1 = curr_date.getTime();
        curr_date_str = df.format(curr_date1);
                
        jTextField1.setText(curr_date_str);
        
        myfile = disp.connect_to_file();
        
        log_buffer = jTextArea1.getText();
        jTextArea1.setText(log_buffer + "System started.\n");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Slot", "Flight ID", "Arrival", "Depature", "Status", "Fuel"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Slot", "Flight ID", "Arrival", "Depature", "Status", "Fuel"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jButton1.setText("Take next");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Terminal");

        jLabel2.setText("Parking");

        jTextField1.setEditable(false);

        jLabel3.setText("Current Time:");

        jLabel4.setText("Current Log");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jButton2.setText("Update tables");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jButton2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(256, 256, 256))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
        buffer = new char[20];
        
        int flight_id;
        
        int plane_id;
        String pilot_name = "";
        
        String table_time_str = "";
        
        Calendar prev_date = curr_date;
        
        Flight fl = null;
        Flight fl_buf = null;
        Plane plane_fl = null;
        String new_slot = null;
        
        int i = 0;
        
        log_buffer = jTextArea1.getText();
        jTextArea1.setText(log_buffer + "--------New Step--------\n");
        
        fl = disp.get_next_fl(myfile);
        
        fls.add_flight(conn, fl);
        i = fls.get_new_flight_id(conn);
        fl = fls.set_flight_id(fl, i);
        
        parks.read_all_parking(conn,main_parking);
        fl_buf = parks.search_next_to_dep(main_parking);
        
        if(fl_buf.get_id() != 1)
        {
            curr_date = fl_buf.get_depature();
            System.out.println(curr_date.get(Calendar.MONTH));
            curr_date.add(Calendar.MONTH, -1);
            curr_date1 = curr_date.getTime();
            curr_date_str = df.format(curr_date1);
            jTextField1.setText(curr_date_str);

            if (curr_date.after(fl_buf.get_depature()) || curr_date.equals(fl_buf.get_depature()))
            {
                parks.remove_from_terminal(main_parking, fl_buf);
                
                log_buffer = jTextArea1.getText();
                jTextArea1.setText(log_buffer + "Flight " + fl_buf.get_id() + " departured from terminal.\n");
            }
        }  
        
        new_slot = parks.find_empty(main_parking);
        parks.add_flight(main_parking, new_slot, fl);
        
        log_buffer = jTextArea1.getText();
        jTextArea1.setText(log_buffer + "Flight " + fl.get_id() + " added to " + new_slot + ".\n");
        
        timet.add_new(main_timetable, fl.get_id());
        
        log_buffer = jTextArea1.getText();
        jTextArea1.setText(log_buffer + "Flight " + fl.get_id() + " added to timetable.\n");

        
        fl_buf = null;
        fl_buf = parks.find_next_on_parking(main_parking);
        if ((fl_buf != null) && (parks.nex_term(main_parking) != "none"))
        {
            parks.from_park_to_term(main_parking, fl);
            
            log_buffer = jTextArea1.getText();
            jTextArea1.setText(log_buffer + "Flight " + fl_buf.get_id() + " moved from parking to terminal.\n");
        }
        
        ParkingService.fill_parkingbase(conn, main_parking);

        for(i=1;i<=10;i++)
        {
            fl = main_parking.get_flight("TERMINAL"+i);
            jTable1.setValueAt("TERMINAL"+i,i-1, 0);
            
            if(fl == null)
            {
                jTable1.setValueAt("EMPTY", i-1, 1);
            }
            else    
            {
                table_time_str =    fl.get_arrival().get(Calendar.YEAR) + "-" +
                                    fl.get_arrival().get(Calendar.MONTH) + "-" +
                                    fl.get_arrival().get(Calendar.DAY_OF_MONTH) + " " +
                                    fl.get_arrival().get(Calendar.HOUR_OF_DAY) + ":" +
                                    fl.get_arrival().get(Calendar.MINUTE) + ":" +
                                    fl.get_arrival().get(Calendar.SECOND);
                
                jTable1.setValueAt(fl.get_id(),    i-1, 1);
                jTable1.setValueAt(table_time_str, i-1, 2);
                
                table_time_str =    fl.get_depature().get(Calendar.YEAR) + "-" +
                                    fl.get_depature().get(Calendar.MONTH) + "-" +
                                    fl.get_depature().get(Calendar.DAY_OF_MONTH) + " " +
                                    fl.get_depature().get(Calendar.HOUR_OF_DAY) + ":" +
                                    fl.get_depature().get(Calendar.MINUTE) + ":" +
                                    fl.get_depature().get(Calendar.SECOND);
                
                jTable1.setValueAt(table_time_str, i-1, 3);
                jTable1.setValueAt(fl.get_status(), i-1, 4);
                jTable1.setValueAt(fl.get_fuel(), i-1, 5);
            }
        }
        
        for(i=1;i<=20;i++)
        {
            fl = main_parking.get_flight("PARKING"+i);
            jTable2.setValueAt("PARKING"+i,         i-1, 0);
            if(fl == null)
            {
                jTable2.setValueAt("EMPTY", i-1, 1);
            }
            else    
            {
                table_time_str =    fl.get_arrival().get(Calendar.YEAR) + "-" +
                                    fl.get_arrival().get(Calendar.MONTH) + "-" +
                                    fl.get_arrival().get(Calendar.DAY_OF_MONTH) + " " +
                                    fl.get_arrival().get(Calendar.HOUR_OF_DAY) + ":" +
                                    fl.get_arrival().get(Calendar.MINUTE) + ":" +
                                    fl.get_arrival().get(Calendar.SECOND);
                jTable2.setValueAt(fl.get_id(),         i-1, 1);
                jTable2.setValueAt(table_time_str,    i-1, 2);
                
                table_time_str =    fl.get_depature().get(Calendar.YEAR) + "-" +
                                    fl.get_depature().get(Calendar.MONTH) + "-" +
                                    fl.get_depature().get(Calendar.DAY_OF_MONTH) + " " +
                                    fl.get_depature().get(Calendar.HOUR_OF_DAY) + ":" +
                                    fl.get_depature().get(Calendar.MINUTE) + ":" +
                                    fl.get_depature().get(Calendar.SECOND);
                jTable2.setValueAt(table_time_str,   i-1, 3);
                jTable2.setValueAt(fl.get_status(), i-1, 4);
                jTable2.setValueAt(fl.get_fuel(), i-1, 5);
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        buffer = new char[20];
                
        int i;
        int j;
        
        int plane_id;
        String pilot_name = "";
        
        String table_time_str = "";
        
        Calendar arr = Calendar.getInstance();
        Calendar dep = Calendar.getInstance();
        
        Flight fl = null;
        
        
        log_buffer = jTextArea1.getText();
        jTextArea1.setText(log_buffer + "--------Tables updated--------\n");
                
        ParkingService.read_all_parking(conn, main_parking);

        for(i=1;i<=10;i++)
        {
            fl = main_parking.get_flight("TERMINAL"+i);
            jTable1.setValueAt("TERMINAL"+i,i-1, 0);
            
            if(fl == null)
            {
                jTable1.setValueAt("EMPTY", i-1, 1);
            }
            else    
            {
                table_time_str =    fl.get_arrival().get(Calendar.YEAR) + "-" +
                                    fl.get_arrival().get(Calendar.MONTH) + "-" +
                                    fl.get_arrival().get(Calendar.DAY_OF_MONTH) + " " +
                                    fl.get_arrival().get(Calendar.HOUR_OF_DAY) + ":" +
                                    fl.get_arrival().get(Calendar.MINUTE) + ":" +
                                    fl.get_arrival().get(Calendar.SECOND);
                
                jTable1.setValueAt(fl.get_id(),    i-1, 1);
                jTable1.setValueAt(table_time_str, i-1, 2);
                
                table_time_str =    fl.get_depature().get(Calendar.YEAR) + "-" +
                                    fl.get_depature().get(Calendar.MONTH) + "-" +
                                    fl.get_depature().get(Calendar.DAY_OF_MONTH) + " " +
                                    fl.get_depature().get(Calendar.HOUR_OF_DAY) + ":" +
                                    fl.get_depature().get(Calendar.MINUTE) + ":" +
                                    fl.get_depature().get(Calendar.SECOND);
                
                jTable1.setValueAt(table_time_str, i-1, 3);
                jTable1.setValueAt(fl.get_status(), i-1, 4);
            }
        }
        
        for(i=1;i<=20;i++)
        {
            fl = main_parking.get_flight("PARKING"+i);
            jTable2.setValueAt("PARKING"+i,         i-1, 0);
            if(fl == null)
            {
                jTable2.setValueAt("EMPTY", i-1, 1);
            }
            else    
            {
                table_time_str =    fl.get_arrival().get(Calendar.YEAR) + "-" +
                                    fl.get_arrival().get(Calendar.MONTH) + "-" +
                                    fl.get_arrival().get(Calendar.DAY_OF_MONTH) + " " +
                                    fl.get_arrival().get(Calendar.HOUR_OF_DAY) + ":" +
                                    fl.get_arrival().get(Calendar.MINUTE) + ":" +
                                    fl.get_arrival().get(Calendar.SECOND);
                jTable2.setValueAt(fl.get_id(),         i-1, 1);
                jTable2.setValueAt(table_time_str,    i-1, 2);
                
                table_time_str =    fl.get_depature().get(Calendar.YEAR) + "-" +
                                    fl.get_depature().get(Calendar.MONTH) + "-" +
                                    fl.get_depature().get(Calendar.DAY_OF_MONTH) + " " +
                                    fl.get_depature().get(Calendar.HOUR_OF_DAY) + ":" +
                                    fl.get_depature().get(Calendar.MINUTE) + ":" +
                                    fl.get_depature().get(Calendar.SECOND);
                jTable2.setValueAt(table_time_str,   i-1, 3);
                jTable2.setValueAt(fl.get_status(), i-1, 4);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(airportservice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(airportservice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(airportservice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(airportservice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new airportservice().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
